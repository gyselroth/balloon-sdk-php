<?php

declare(strict_types=1);

/**
 * balloon
 *
 * @copyright   Copryright (c) 2019 gyselroth GmbH (https://gyselroth.com)
 * @license     MIT https://opensource.org/licenses/MIT
 */

/**
 * balloon API.
 *
 * balloon API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Balloon\Sdk\Model;

use ArrayAccess;
use Balloon\Sdk\ObjectSerializer;

/**
 * CoreV2File Class Doc Comment.
 *
 * @category Class
 * @description A collection can hold an unlimited number of child nodes.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class CoreV2File implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    const ACCESS_RW = 'rw';
    const ACCESS_W = 'w';
    const ACCESS_M = 'm';
    const ACCESS_INBOX = 'w+';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'core.v2.File';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        '_links' => '\Balloon\Sdk\Model\CoreV2Links',
        'id' => 'string',
        'created' => '\DateTime',
        'changed' => '\DateTime',
        'deleted' => '\DateTime',
        'name' => 'string',
        'mime' => 'string',
        'readonly' => 'bool',
        'directory' => 'bool',
        'meta' => '\Balloon\Sdk\Model\CoreV2NodeMeta',
        'size' => 'float',
        'path' => 'string',
        'access' => 'string',
        'parent' => '\Balloon\Sdk\Model\CoreV2NodeAllOfParent',
        'share' => '\Balloon\Sdk\Model\CoreV2NodeAllOfShare',
        'shareowner' => '\Balloon\Sdk\Model\CoreV2NodeAllOfShareowner',
        'subscription' => 'bool',
        'subscription_exclude_me' => 'bool',
        'sharelink_has_password' => 'bool',
        'version' => 'float',
        'hash' => 'string',
        'preview' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPIFormats = [
        '_links' => null,
        'id' => null,
        'created' => 'date-time',
        'changed' => 'date-time',
        'deleted' => 'date-time',
        'name' => null,
        'mime' => null,
        'readonly' => null,
        'directory' => null,
        'meta' => null,
        'size' => null,
        'path' => null,
        'access' => null,
        'parent' => null,
        'share' => null,
        'shareowner' => null,
        'subscription' => null,
        'subscription_exclude_me' => null,
        'sharelink_has_password' => null,
        'version' => null,
        'hash' => null,
        'preview' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_links' => '_links',
        'id' => 'id',
        'created' => 'created',
        'changed' => 'changed',
        'deleted' => 'deleted',
        'name' => 'name',
        'mime' => 'mime',
        'readonly' => 'readonly',
        'directory' => 'directory',
        'meta' => 'meta',
        'size' => 'size',
        'path' => 'path',
        'access' => 'access',
        'parent' => 'parent',
        'share' => 'share',
        'shareowner' => 'shareowner',
        'subscription' => 'subscription',
        'subscription_exclude_me' => 'subscription_exclude_me',
        'sharelink_has_password' => 'sharelink_has_password',
        'version' => 'version',
        'hash' => 'hash',
        'preview' => 'preview',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        '_links' => 'setLinks',
        'id' => 'setId',
        'created' => 'setCreated',
        'changed' => 'setChanged',
        'deleted' => 'setDeleted',
        'name' => 'setName',
        'mime' => 'setMime',
        'readonly' => 'setReadonly',
        'directory' => 'setDirectory',
        'meta' => 'setMeta',
        'size' => 'setSize',
        'path' => 'setPath',
        'access' => 'setAccess',
        'parent' => 'setParent',
        'share' => 'setShare',
        'shareowner' => 'setShareowner',
        'subscription' => 'setSubscription',
        'subscription_exclude_me' => 'setSubscriptionExcludeMe',
        'sharelink_has_password' => 'setSharelinkHasPassword',
        'version' => 'setVersion',
        'hash' => 'setHash',
        'preview' => 'setPreview',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        '_links' => 'getLinks',
        'id' => 'getId',
        'created' => 'getCreated',
        'changed' => 'getChanged',
        'deleted' => 'getDeleted',
        'name' => 'getName',
        'mime' => 'getMime',
        'readonly' => 'getReadonly',
        'directory' => 'getDirectory',
        'meta' => 'getMeta',
        'size' => 'getSize',
        'path' => 'getPath',
        'access' => 'getAccess',
        'parent' => 'getParent',
        'share' => 'getShare',
        'shareowner' => 'getShareowner',
        'subscription' => 'getSubscription',
        'subscription_exclude_me' => 'getSubscriptionExcludeMe',
        'sharelink_has_password' => 'getSharelinkHasPassword',
        'version' => 'getVersion',
        'hash' => 'getHash',
        'preview' => 'getPreview',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['changed'] = isset($data['changed']) ? $data['changed'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['mime'] = isset($data['mime']) ? $data['mime'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : false;
        $this->container['directory'] = isset($data['directory']) ? $data['directory'] : false;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : 0;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['access'] = isset($data['access']) ? $data['access'] : 'rw';
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['share'] = isset($data['share']) ? $data['share'] : null;
        $this->container['shareowner'] = isset($data['shareowner']) ? $data['shareowner'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : false;
        $this->container['subscription_exclude_me'] = isset($data['subscription_exclude_me']) ? $data['subscription_exclude_me'] : false;
        $this->container['sharelink_has_password'] = isset($data['sharelink_has_password']) ? $data['sharelink_has_password'] : false;
        $this->container['version'] = isset($data['version']) ? $data['version'] : 1;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['preview'] = isset($data['preview']) ? $data['preview'] : null;
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getAccessAllowableValues()
    {
        return [
            self::ACCESS_RW,
            self::ACCESS_W,
            self::ACCESS_M,
            self::ACCESS_W,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccessAllowableValues();
        if (!is_null($this->container['access']) && !in_array($this->container['access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'access', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets _links.
     *
     * @return null|\Balloon\Sdk\Model\CoreV2Links
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links.
     *
     * @param null|\Balloon\Sdk\Model\CoreV2Links $_links _links
     *
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return null|string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param null|string $id Unique 12-byte resource identifier. Note this is a MongoDB ObjectId. The name is the standard resource identifier, the id only useful to verify that a given resource was completely recreated. An ID is immutable and will be created on the server.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created.
     *
     * @return null|\DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created.
     *
     * @param null|\DateTime $created ISO 8601 timestamp when the resource was created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets changed.
     *
     * @return null|\DateTime
     */
    public function getChanged()
    {
        return $this->container['changed'];
    }

    /**
     * Sets changed.
     *
     * @param null|\DateTime $changed ISO 8601 timestamp when the resource was changed
     *
     * @return $this
     */
    public function setChanged($changed)
    {
        $this->container['changed'] = $changed;

        return $this;
    }

    /**
     * Gets deleted.
     *
     * @return null|\DateTime
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted.
     *
     * @param null|\DateTime $deleted ISO 8601 timestamp when the resource was deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return null|string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param null|string $name node name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mime.
     *
     * @return null|string
     */
    public function getMime()
    {
        return $this->container['mime'];
    }

    /**
     * Sets mime.
     *
     * @param null|string $mime mimetype
     *
     * @return $this
     */
    public function setMime($mime)
    {
        $this->container['mime'] = $mime;

        return $this;
    }

    /**
     * Gets readonly.
     *
     * @return null|bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly.
     *
     * @param null|bool $readonly readonly only affects the content of the node but not metadata
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets directory.
     *
     * @return null|bool
     */
    public function getDirectory()
    {
        return $this->container['directory'];
    }

    /**
     * Sets directory.
     *
     * @param null|bool $directory if node is of type Collection this flag is true
     *
     * @return $this
     */
    public function setDirectory($directory)
    {
        $this->container['directory'] = $directory;

        return $this;
    }

    /**
     * Gets meta.
     *
     * @return null|\Balloon\Sdk\Model\CoreV2NodeMeta
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta.
     *
     * @param null|\Balloon\Sdk\Model\CoreV2NodeMeta $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets size.
     *
     * @return null|float
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size.
     *
     * @param null|float $size The size in bytes. If the node is of type collection the size is the number of child nodes.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets path.
     *
     * @return null|string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path.
     *
     * @param null|string $path the path abstraction of the node
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets access.
     *
     * @return null|string
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access.
     *
     * @param null|string $access access level
     *
     * @return $this
     */
    public function setAccess($access)
    {
        $allowedValues = $this->getAccessAllowableValues();
        if (!is_null($access) && !in_array($access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'access', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets parent.
     *
     * @return null|\Balloon\Sdk\Model\CoreV2NodeAllOfParent
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent.
     *
     * @param null|\Balloon\Sdk\Model\CoreV2NodeAllOfParent $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets share.
     *
     * @return null|\Balloon\Sdk\Model\CoreV2NodeAllOfShare
     */
    public function getShare()
    {
        return $this->container['share'];
    }

    /**
     * Sets share.
     *
     * @param null|\Balloon\Sdk\Model\CoreV2NodeAllOfShare $share share
     *
     * @return $this
     */
    public function setShare($share)
    {
        $this->container['share'] = $share;

        return $this;
    }

    /**
     * Gets shareowner.
     *
     * @return null|\Balloon\Sdk\Model\CoreV2NodeAllOfShareowner
     */
    public function getShareowner()
    {
        return $this->container['shareowner'];
    }

    /**
     * Sets shareowner.
     *
     * @param null|\Balloon\Sdk\Model\CoreV2NodeAllOfShareowner $shareowner shareowner
     *
     * @return $this
     */
    public function setShareowner($shareowner)
    {
        $this->container['shareowner'] = $shareowner;

        return $this;
    }

    /**
     * Gets subscription.
     *
     * @return null|bool
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription.
     *
     * @param null|bool $subscription is true if the user has an active subscription on this node
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets subscription_exclude_me.
     *
     * @return null|bool
     */
    public function getSubscriptionExcludeMe()
    {
        return $this->container['subscription_exclude_me'];
    }

    /**
     * Sets subscription_exclude_me.
     *
     * @param null|bool $subscription_exclude_me subscription excludes actions from the subscribed user itself
     *
     * @return $this
     */
    public function setSubscriptionExcludeMe($subscription_exclude_me)
    {
        $this->container['subscription_exclude_me'] = $subscription_exclude_me;

        return $this;
    }

    /**
     * Gets sharelink_has_password.
     *
     * @return null|bool
     */
    public function getSharelinkHasPassword()
    {
        return $this->container['sharelink_has_password'];
    }

    /**
     * Sets sharelink_has_password.
     *
     * @param null|bool $sharelink_has_password is true if the node has a protected public sharelink
     *
     * @return $this
     */
    public function setSharelinkHasPassword($sharelink_has_password)
    {
        $this->container['sharelink_has_password'] = $sharelink_has_password;

        return $this;
    }

    /**
     * Gets version.
     *
     * @return null|float
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version.
     *
     * @param null|float $version The content version. Does increase if the content gets changed.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets hash.
     *
     * @return null|string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash.
     *
     * @param null|string $hash MD5 content checksum
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets preview.
     *
     * @return null|bool
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview.
     *
     * @param null|bool $preview Is true if there is a preview
     *
     * @return $this
     */
    public function setPreview($preview)
    {
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int   $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

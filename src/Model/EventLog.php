<?php
/**
 * EventLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  Balloon\Sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * balloon API
 *
 * balloon API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Balloon\Sdk\Model;

use \ArrayAccess;
use \Balloon\Sdk\ObjectSerializer;

/**
 * EventLog Class Doc Comment
 *
 * @category Class
 * @description Event log entry. Each event represents an executed operation on the server.
 * @package  Balloon\Sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event' => 'string',
        'timestamp' => 'string',
        'operation' => 'string',
        'node' => '\Balloon\Sdk\Model\EventLogNode',
        'parent' => '\Balloon\Sdk\Model\EventLogParent',
        'share' => '\Balloon\Sdk\Model\NodeShare',
        'user' => '\Balloon\Sdk\Model\FileHistoryUser',
        'client' => '\Balloon\Sdk\Model\EventLogClient'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event' => null,
        'timestamp' => null,
        'operation' => null,
        'node' => null,
        'parent' => null,
        'share' => null,
        'user' => null,
        'client' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event' => 'event',
        'timestamp' => 'timestamp',
        'operation' => 'operation',
        'node' => 'node',
        'parent' => 'parent',
        'share' => 'share',
        'user' => 'user',
        'client' => 'client'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event' => 'setEvent',
        'timestamp' => 'setTimestamp',
        'operation' => 'setOperation',
        'node' => 'setNode',
        'parent' => 'setParent',
        'share' => 'setShare',
        'user' => 'setUser',
        'client' => 'setClient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event' => 'getEvent',
        'timestamp' => 'getTimestamp',
        'operation' => 'getOperation',
        'node' => 'getNode',
        'parent' => 'getParent',
        'share' => 'getShare',
        'user' => 'getUser',
        'client' => 'getClient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATION_DELETE_COLLECTION_REFERENCE = 'deleteCollectionReference';
    const OPERATION_DELETE_COLLECTION_SHARE = 'deleteCollectionShare';
    const OPERATION_DELETE_COLLECTION = 'deleteCollection';
    const OPERATION_ADD_COLLECTION = 'addCollection';
    const OPERATION_ADD_FILE = 'addFile';
    const OPERATION_ADD_COLLECTION_SHARE = 'addCollectionShare';
    const OPERATION_ADD_COLLECTION_REFERENCE = 'addCollectionReference';
    const OPERATION_UNDELETE_FILE = 'undeleteFile';
    const OPERATION_UNDELETE_COLLECTION_REFERENCE = 'undeleteCollectionReference';
    const OPERATION_UNDELETE_COLLECTION_SHARE = 'undeleteCollectionShare';
    const OPERATION_RESTORE_FILE = 'restoreFile';
    const OPERATION_RENAME_FILE = 'renameFile';
    const OPERATION_RENAME_COLLECTION = 'renameCollection';
    const OPERATION_RENAME_COLLECTION_SHARE = 'renameCollectionShare';
    const OPERATION_RENAME_COLLECTION_REFERENCE = 'renameCollectionReference';
    const OPERATION_COPY_FILE = 'copyFile';
    const OPERATION_COPY_COLLECTION = 'copyCollection';
    const OPERATION_COPY_COLLECTION_SHARE = 'copyCollectionShare';
    const OPERATION_COPY_COLLECTION_R_FEFERENCE = 'copyCollectionRFeference';
    const OPERATION_MOVE_FILE = 'moveFile';
    const OPERATION_MOVE_COLLECTION = 'moveCollection';
    const OPERATION_MOVE_COLLECTION_REFERENCE = 'moveCollectionReference';
    const OPERATION_MOVE_COLLECTION_SHARE = 'moveCollectionShare';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_DELETE_COLLECTION_REFERENCE,
            self::OPERATION_DELETE_COLLECTION_SHARE,
            self::OPERATION_DELETE_COLLECTION,
            self::OPERATION_ADD_COLLECTION,
            self::OPERATION_ADD_FILE,
            self::OPERATION_ADD_COLLECTION_SHARE,
            self::OPERATION_ADD_COLLECTION_REFERENCE,
            self::OPERATION_UNDELETE_FILE,
            self::OPERATION_UNDELETE_COLLECTION_REFERENCE,
            self::OPERATION_UNDELETE_COLLECTION_SHARE,
            self::OPERATION_RESTORE_FILE,
            self::OPERATION_RENAME_FILE,
            self::OPERATION_RENAME_COLLECTION,
            self::OPERATION_RENAME_COLLECTION_SHARE,
            self::OPERATION_RENAME_COLLECTION_REFERENCE,
            self::OPERATION_COPY_FILE,
            self::OPERATION_COPY_COLLECTION,
            self::OPERATION_COPY_COLLECTION_SHARE,
            self::OPERATION_COPY_COLLECTION_R_FEFERENCE,
            self::OPERATION_MOVE_FILE,
            self::OPERATION_MOVE_COLLECTION,
            self::OPERATION_MOVE_COLLECTION_REFERENCE,
            self::OPERATION_MOVE_COLLECTION_SHARE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['node'] = isset($data['node']) ? $data['node'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['share'] = isset($data['share']) ? $data['share'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event The event id.
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp ISO 8601 timestamp when the event was created.
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation The event operation.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($operation) && !in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets node
     *
     * @return \Balloon\Sdk\Model\EventLogNode
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     *
     * @param \Balloon\Sdk\Model\EventLogNode $node node
     *
     * @return $this
     */
    public function setNode($node)
    {
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Balloon\Sdk\Model\EventLogParent
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Balloon\Sdk\Model\EventLogParent $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets share
     *
     * @return \Balloon\Sdk\Model\NodeShare
     */
    public function getShare()
    {
        return $this->container['share'];
    }

    /**
     * Sets share
     *
     * @param \Balloon\Sdk\Model\NodeShare $share share
     *
     * @return $this
     */
    public function setShare($share)
    {
        $this->container['share'] = $share;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Balloon\Sdk\Model\FileHistoryUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Balloon\Sdk\Model\FileHistoryUser $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Balloon\Sdk\Model\EventLogClient
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Balloon\Sdk\Model\EventLogClient $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



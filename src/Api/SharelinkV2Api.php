<?php

declare(strict_types=1);

/**
 * balloon
 *
 * @copyright   Copryright (c) 2019 gyselroth GmbH (https://gyselroth.com)
 * @license     MIT https://opensource.org/licenses/MIT
 */

/**
 * balloon API.
 *
 * balloon API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Balloon\Sdk\Api;

use Balloon\Sdk\ApiException;
use Balloon\Sdk\Configuration;
use Balloon\Sdk\HeaderSelector;
use Balloon\Sdk\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * SharelinkV2Api Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class SharelinkV2Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createLink.
     *
     * Create a unique sharing link of a node (global accessible): a possible existing link will be deleted if this method will be called.
     *
     * @param string $node       Node identifier (required)
     * @param float  $expiration Expire timestamp as unix timestap. Tells the server when the public link should expire automatically. The default is to never expire. (optional, default to 0)
     * @param string $password   Optionally set a password to protect the public link. (optional)
     *
     * @throws \Balloon\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Balloon\Sdk\Model\CoreV2Node
     */
    public function createLink($node, $expiration = '0', $password = null)
    {
        list($response) = $this->createLinkWithHttpInfo($node, $expiration, $password);

        return $response;
    }

    /**
     * Operation createLinkWithHttpInfo.
     *
     * Create a unique sharing link of a node (global accessible): a possible existing link will be deleted if this method will be called.
     *
     * @param string $node       Node identifier (required)
     * @param float  $expiration Expire timestamp as unix timestap. Tells the server when the public link should expire automatically. The default is to never expire. (optional, default to 0)
     * @param string $password   Optionally set a password to protect the public link. (optional)
     *
     * @throws \Balloon\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Balloon\Sdk\Model\CoreV2Node, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLinkWithHttpInfo($node, $expiration = '0', $password = null)
    {
        $returnType = '\Balloon\Sdk\Model\CoreV2Node';
        $request = $this->createLinkRequest($node, $expiration, $password);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Balloon\Sdk\Model\CoreV2Node',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createLinkAsync.
     *
     * Create a unique sharing link of a node (global accessible): a possible existing link will be deleted if this method will be called.
     *
     * @param string $node       Node identifier (required)
     * @param float  $expiration Expire timestamp as unix timestap. Tells the server when the public link should expire automatically. The default is to never expire. (optional, default to 0)
     * @param string $password   Optionally set a password to protect the public link. (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkAsync($node, $expiration = '0', $password = null)
    {
        return $this->createLinkAsyncWithHttpInfo($node, $expiration, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLinkAsyncWithHttpInfo.
     *
     * Create a unique sharing link of a node (global accessible): a possible existing link will be deleted if this method will be called.
     *
     * @param string $node       Node identifier (required)
     * @param float  $expiration Expire timestamp as unix timestap. Tells the server when the public link should expire automatically. The default is to never expire. (optional, default to 0)
     * @param string $password   Optionally set a password to protect the public link. (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkAsyncWithHttpInfo($node, $expiration = '0', $password = null)
    {
        $returnType = '\Balloon\Sdk\Model\CoreV2Node';
        $request = $this->createLinkRequest($node, $expiration, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Operation deleteLink.
     *
     * Delete an existing sharing link
     *
     * @param string $node Node identifier (required)
     *
     * @throws \Balloon\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function deleteLink($node)
    {
        $this->deleteLinkWithHttpInfo($node);
    }

    /**
     * Operation deleteLinkWithHttpInfo.
     *
     * Delete an existing sharing link
     *
     * @param string $node Node identifier (required)
     *
     * @throws \Balloon\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLinkWithHttpInfo($node)
    {
        $returnType = '';
        $request = $this->deleteLinkRequest($node);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLinkAsync.
     *
     * Delete an existing sharing link
     *
     * @param string $node Node identifier (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLinkAsync($node)
    {
        return $this->deleteLinkAsyncWithHttpInfo($node)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLinkAsyncWithHttpInfo.
     *
     * Delete an existing sharing link
     *
     * @param string $node Node identifier (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLinkAsyncWithHttpInfo($node)
    {
        $returnType = '';
        $request = $this->deleteLinkRequest($node);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLink'.
     *
     * @param string $node       Node identifier (required)
     * @param float  $expiration Expire timestamp as unix timestap. Tells the server when the public link should expire automatically. The default is to never expire. (optional, default to 0)
     * @param string $password   Optionally set a password to protect the public link. (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLinkRequest($node, $expiration = '0', $password = null)
    {
        // verify the required parameter 'node' is set
        if ($node === null || (is_array($node) && count($node) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node when calling createLink'
            );
        }

        $resourcePath = '/api/v2/nodes/{node}/share-link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration);
        }
        // query params
        if ($password !== null) {
            $queryParams['password'] = ObjectSerializer::toQueryValue($password);
        }

        // path params
        if ($node !== null) {
            $resourcePath = str_replace(
                '{'.'node'.'}',
                ObjectSerializer::toPathValue($node),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create request for operation 'deleteLink'.
     *
     * @param string $node Node identifier (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLinkRequest($node)
    {
        // verify the required parameter 'node' is set
        if ($node === null || (is_array($node) && count($node) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node when calling deleteLink'
            );
        }

        $resourcePath = '/api/v2/nodes/{node}/share-link';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($node !== null) {
            $resourcePath = str_replace(
                '{'.'node'.'}',
                ObjectSerializer::toPathValue($node),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}

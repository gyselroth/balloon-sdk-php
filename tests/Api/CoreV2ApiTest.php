<?php

declare(strict_types=1);

/**
 * balloon
 *
 * @copyright   Copryright (c) 2019 gyselroth GmbH (https://gyselroth.com)
 * @license     MIT https://opensource.org/licenses/MIT
 */

/**
 * balloon API.
 *
 * balloon API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Balloon\Sdk;

/**
 * CoreV2ApiTest Class Doc Comment.
 *
 * @category Class
 *
 * @author   Swagger Codegen team
 *
 * @see     https://github.com/swagger-api/swagger-codegen
 */
class CoreV2ApiTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Setup before running any test cases.
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Clean up after running all test cases.
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Setup before running each test case.
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case.
     */
    public function tearDown()
    {
    }

    /**
     * Test case for addGroup.
     *
     * Add new group.
     */
    public function testAddGroup()
    {
    }

    /**
     * Test case for addUser.
     *
     * Add new user.
     */
    public function testAddUser()
    {
    }

    /**
     * Test case for cloneNode.
     *
     * Clone existing node.
     */
    public function testCloneNode()
    {
    }

    /**
     * Test case for createCollection.
     *
     * Create a new collection.
     */
    public function testCreateCollection()
    {
    }

    /**
     * Test case for createRootCollection.
     *
     * Create a new collection in root.
     */
    public function testCreateRootCollection()
    {
    }

    /**
     * Test case for createToken.
     *
     * OAUTH2/OIDC token endpoint.
     */
    public function testCreateToken()
    {
    }

    /**
     * Test case for deleteGroup.
     *
     * Delete group.
     */
    public function testDeleteGroup()
    {
    }

    /**
     * Test case for deleteNode.
     *
     * Delete node.
     */
    public function testDeleteNode()
    {
    }

    /**
     * Test case for deleteShare.
     *
     * Does only remove sharing options and transform a share back into a normal collection. There will not be any data loss after this action. All existing references would be removed automatically..
     */
    public function testDeleteShare()
    {
    }

    /**
     * Test case for deleteUser.
     *
     * Delete user.
     */
    public function testDeleteUser()
    {
    }

    /**
     * Test case for getApi.
     *
     * Get server status.
     */
    public function testGetApi()
    {
    }

    /**
     * Test case for getChildren.
     *
     * Get all children of a collection.
     */
    public function testGetChildren()
    {
    }

    /**
     * Test case for getCollections.
     *
     * Get all collections.
     */
    public function testGetCollections()
    {
    }

    /**
     * Test case for getContent.
     *
     * Download node contents. Note that collections are zipped on-the-fly..
     */
    public function testGetContent()
    {
    }

    /**
     * Test case for getCurrentUser.
     *
     * Get user object of the current authenticated user.
     */
    public function testGetCurrentUser()
    {
    }

    /**
     * Test case for getDeletedNodes.
     *
     * Return delete nodes (Excluding sub nodes of deleted collections).
     */
    public function testGetDeletedNodes()
    {
    }

    /**
     * Test case for getDelta.
     *
     * Delta stream with cursor support..
     */
    public function testGetDelta()
    {
    }

    /**
     * Test case for getEventLog.
     *
     * Get event log containing all operations which are made by the user himself or share members.
     */
    public function testGetEventLog()
    {
    }

    /**
     * Test case for getFileHistory.
     *
     * Get a full change history of a file.
     */
    public function testGetFileHistory()
    {
    }

    /**
     * Test case for getFiles.
     *
     * Get all files.
     */
    public function testGetFiles()
    {
    }

    /**
     * Test case for getGroup.
     *
     * Get single group.
     */
    public function testGetGroup()
    {
    }

    /**
     * Test case for getGroupMembers.
     *
     * Request all member of a group.
     */
    public function testGetGroupMembers()
    {
    }

    /**
     * Test case for getGroups.
     *
     * Get groups.
     */
    public function testGetGroups()
    {
    }

    /**
     * Test case for getLastCursor.
     *
     * Use this method to request the latest cursor if you only need to now if there are changes on the server. This method will not return any other data than the newest cursor. To request a feed with all deltas request /delta..
     */
    public function testGetLastCursor()
    {
    }

    /**
     * Test case for getNode.
     *
     * Get single node.
     */
    public function testGetNode()
    {
    }

    /**
     * Test case for getNodeAttributeSummary.
     *
     * Get summary of node usage..
     */
    public function testGetNodeAttributeSummary()
    {
    }

    /**
     * Test case for getNodeEventLog.
     *
     * Get event log containing all operations which are made by the user himself or share members on a given node.
     */
    public function testGetNodeEventLog()
    {
    }

    /**
     * Test case for getNodes.
     *
     * Get all nodes.
     */
    public function testGetNodes()
    {
    }

    /**
     * Test case for getParentNodes.
     *
     * The hirarchy of all parent nodes is ordered in a single level array beginning with the collection on the highest level..
     */
    public function testGetParentNodes()
    {
    }

    /**
     * Test case for getRootChildren.
     *
     * Get all children of the root collection.
     */
    public function testGetRootChildren()
    {
    }

    /**
     * Test case for getShare.
     *
     * Get share acl and share name.
     */
    public function testGetShare()
    {
    }

    /**
     * Test case for getUser.
     *
     * Get single user.
     */
    public function testGetUser()
    {
    }

    /**
     * Test case for getUserAvatar.
     *
     * Get user avatar.
     */
    public function testGetUserAvatar()
    {
    }

    /**
     * Test case for getUserGroups.
     *
     * Request all groups of a user.
     */
    public function testGetUserGroups()
    {
    }

    /**
     * Test case for getUsers.
     *
     * Get users.
     */
    public function testGetUsers()
    {
    }

    /**
     * Test case for getV2.
     *
     * Get server status.
     */
    public function testGetV2()
    {
    }

    /**
     * Test case for moveNode.
     *
     * Move node (Change parent collection), single or multiple ones.
     */
    public function testMoveNode()
    {
    }

    /**
     * Test case for patchGroup.
     *
     * Set attributes for group.
     */
    public function testPatchGroup()
    {
    }

    /**
     * Test case for patchUser.
     *
     * Set attributes for user.
     */
    public function testPatchUser()
    {
    }

    /**
     * Test case for rollbackFile.
     *
     * Rollback to a recent version from history. Use the version number from history..
     */
    public function testRollbackFile()
    {
    }

    /**
     * Test case for shareCollection.
     *
     * Create a new share from an existing collection.
     */
    public function testShareCollection()
    {
    }

    /**
     * Test case for undeleteGroup.
     *
     * Restore deleted group.
     */
    public function testUndeleteGroup()
    {
    }

    /**
     * Test case for undeleteNode.
     *
     * Undelete (Restore from trash) a single node or multiple ones..
     */
    public function testUndeleteNode()
    {
    }

    /**
     * Test case for undeleteUser.
     *
     * Restore deleted user.
     */
    public function testUndeleteUser()
    {
    }

    /**
     * Test case for updateNode.
     *
     * Change attributes.
     */
    public function testUpdateNode()
    {
    }

    /**
     * Test case for uploadChunk.
     *
     * Upload a file chunk. You have to manually splitt the binary data into multiple chunks and upload them successively! using this method. Once uploading the last chunk, the server will automatically create or update the file node. You may set the parent collection, name and or custom attributes only with the last request to save traffic..
     */
    public function testUploadChunk()
    {
    }

    /**
     * Test case for uploadFile.
     *
     * Upload an entire file in one-shot. Use this endpoint only for small files, for bigger files use the chunking endpoint..
     */
    public function testUploadFile()
    {
    }
}
